// Code generated by hertz generator.

package handler

import (
	"context"
	"errors"
	"fmt"
	"github.com/kingjxu/ddbaby/model"
	"github.com/kingjxu/ddbaby/service"
	"github.com/kingjxu/ddbaby/util"
	"github.com/sirupsen/logrus"
	"net/url"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	ddbaby "github.com/kingjxu/ddbaby/biz/model/ddbaby"
)

// JkCreateOrder .
// @router /jk/create_order [POST]
func JkCreateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ddbaby.JkCreateOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	logrus.WithContext(ctx).Infof("header:%v", util.ToJSON(string(c.Request.Header.RawHeaders())))
	platform := c.Request.Header.Get("Device-Platform")
	resp, _ := NewJkCreateOrderHandlerHandler(&req, &model.CommonParam{
		ClientIP: c.ClientIP(),
		Platform: platform,
	}).Handle(ctx)
	logrus.WithContext(ctx).Infof("resp:%v", util.ToJSON(resp))
	c.JSON(consts.StatusOK, resp)
}

type JkCreateOrderHandler struct {
	req *ddbaby.JkCreateOrderReq

	commonParam *model.CommonParam
	resp        *ddbaby.JkCreateOrderResp
}

func NewJkCreateOrderHandlerHandler(req *ddbaby.JkCreateOrderReq, param *model.CommonParam) *JkCreateOrderHandler {
	return &JkCreateOrderHandler{
		req:         req,
		commonParam: param,
		resp:        &ddbaby.JkCreateOrderResp{},
	}
}

func (h *JkCreateOrderHandler) check() error {
	if h.req.GetQoType() == "" {
		return errors.New("qo_type is empty")
	}
	if h.req.GetSeq() == 0 {
		return errors.New("seq is empty")
	}
	if len(h.req.GetQaItems()) == 0 {
		return errors.New("aq_items is empty")
	}
	return nil
}

func (h *JkCreateOrderHandler) Handle(ctx context.Context) (*ddbaby.JkCreateOrderResp, error) {
	logrus.WithContext(ctx).Infof("[JkCreateOrderHandler] req:%v", util.ToJSON(h.req))
	if err := h.check(); err != nil {
		logrus.WithContext(ctx).Errorf("[JkCreateOrderHandler] check err:%v", err)
		return h.newResp(ctx, -1, "param err"), nil
	}
	h5Url, orderID, err := service.CreateOrder(ctx, h.req, h.commonParam)
	if err != nil {
		logrus.WithContext(ctx).Errorf("[JkCreateOrderHandler] service.CreateOrder err:%v", err)
		return h.newResp(ctx, -1, "wx prepay err"), nil
	}
	h.resp.PayURL = util.Ptr(h5Url + "&redirect_url=" + url.QueryEscape(fmt.Sprintf("http://ddbaby.site/qa-form/dist/index.html#/pages/pay/index?order_id=%v", orderID)))
	h.resp.OrderID = util.Ptr(orderID)
	return h.resp, nil
}

func (h *JkCreateOrderHandler) newResp(ctx context.Context, code int32, msg string) *ddbaby.JkCreateOrderResp {
	resp := &ddbaby.JkCreateOrderResp{
		BaseResp: &ddbaby.BaseResp{
			StatusMessage: msg,
			StatusCode:    code,
		},
	}
	return resp
}

// Code generated by hertz generator.

package handler

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	ddbaby "github.com/kingjxu/ddbaby/biz/model/ddbaby"
	constdef "github.com/kingjxu/ddbaby/const"
	"github.com/kingjxu/ddbaby/util"
	"github.com/sirupsen/logrus"
)

// GetJkQoList .
// @router /jk/qo_list [GET]
func GetJkQoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ddbaby.GetJkQoListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, _ := NewJkQoListHandlerHandler(&req).Handle(ctx)

	c.JSON(consts.StatusOK, resp)
}

type JkQoListHandler struct {
	req  *ddbaby.GetJkQoListReq
	resp *ddbaby.GetJkQoListResp
}

func NewJkQoListHandlerHandler(req *ddbaby.GetJkQoListReq) *JkQoListHandler {
	return &JkQoListHandler{
		req:  req,
		resp: &ddbaby.GetJkQoListResp{},
	}
}

func (h *JkQoListHandler) check() error {
	if h.req.GetQoType() == "" {
		return errors.New("qo_type is empty")
	}
	return nil
}

func (h *JkQoListHandler) Handle(ctx context.Context) (*ddbaby.GetJkQoListResp, error) {
	logrus.WithContext(ctx).Infof("[JkQoListHandler] req:%v", util.ToJSON(h.req))
	if err := h.check(); err != nil {
		logrus.WithContext(ctx).Errorf("[JkQoListHandler] check err:%v", err)
		return h.newResp(ctx, -1, "param err"), nil
	}
	/*	jkQo, err := service.GetJkQoInfo(ctx, h.req.GetQoType())
		if err != nil {
			logrus.WithContext(ctx).Errorf("[JkQoListHandler] service.GetJkQoInfo err:%v", err)
			return h.newResp(ctx, -1, "param err"), nil
		}
		for _, qo := range jkQo {
			h.resp.Qo = append(h.resp.Qo, &ddbaby.JkQoItem{
				Question: &qo.Question,
				Options:  util.UnmarshalString[[]string](qo.Options),
			})
		}*/
	h.resp.Qo = constdef.Question2Options[h.req.GetQoType()]
	h.resp.QoCnt = util.Ptr(int32(len(h.resp.Qo)))
	h.resp.ExpectCompleteTime = util.Ptr(int32(1))
	h.resp.Title = util.Ptr(constdef.JkType2Title[h.req.GetQoType()])
	h.resp.Tips = util.Ptr("你的评测已完成，支付完成后查看评测结果。")
	h.resp.ParticipantCount = util.Ptr(int32(11382))
	if h.req.GetNeedPic() == true {
		h.resp.Pic = util.Ptr("https://lf3-static.bytednsdoc.com/obj/eden-cn/qeeh7upqbe/gxt.png")
	}

	return h.resp, nil
}

func (h *JkQoListHandler) newResp(ctx context.Context, code int32, msg string) *ddbaby.GetJkQoListResp {
	resp := &ddbaby.GetJkQoListResp{
		BaseResp: &ddbaby.BaseResp{
			StatusMessage: msg,
			StatusCode:    code,
		},
	}
	return resp
}

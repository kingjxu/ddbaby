// Code generated by hertz generator.

package handler

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/kingjxu/ddbaby/service"
	"github.com/kingjxu/ddbaby/util"
	"github.com/sirupsen/logrus"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	ddbaby "github.com/kingjxu/ddbaby/biz/model/ddbaby"
)

// PayCallback .
// @router /jk/pay_callback [POST]
func PayCallback(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ddbaby.PayCallbackReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	httpReq, err := adaptor.GetCompatRequest(&c.Request)
	if err != nil {
		logrus.Errorf("GetCompatRequest err:%v", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, _ := NewJkPayCallbackHandlerHandler(httpReq).Handle(ctx)

	c.JSON(consts.StatusOK, resp)
}

type JkPayCallbackHandler struct {
	req  *http.Request
	resp *ddbaby.PayCallbackResp
}

func NewJkPayCallbackHandlerHandler(req *http.Request) *JkPayCallbackHandler {
	return &JkPayCallbackHandler{
		req:  req,
		resp: &ddbaby.PayCallbackResp{},
	}
}

func (h *JkPayCallbackHandler) check() error {
	return nil
}

func (h *JkPayCallbackHandler) Handle(ctx context.Context) (*ddbaby.PayCallbackResp, error) {
	err := service.PayCallback(ctx, h.req)
	if err != nil {
		logrus.Errorf("PayCallback err:%v", err)
		return h.newResp(ctx, "500", err.Error()), nil
	}
	return h.newResp(ctx, "200", ""), nil
}

func (h *JkPayCallbackHandler) newResp(ctx context.Context, code string, msg string) *ddbaby.PayCallbackResp {
	resp := &ddbaby.PayCallbackResp{
		Code:    util.Ptr(code),
		Message: util.Ptr(msg),
	}
	return resp
}

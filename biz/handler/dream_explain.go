// Code generated by hertz generator.

package handler

import (
	"context"
	"errors"
	"github.com/kingjxu/ddbaby/service"
	"github.com/kingjxu/ddbaby/util"
	"github.com/sirupsen/logrus"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	ddbaby "github.com/kingjxu/ddbaby/biz/model/ddbaby"
)

// DreamExplain .
// @router /lyxz/dream_explain [GET]
func DreamExplain(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ddbaby.DreamExplainReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, _ := NewDreamExplainHandler(&req).Handle(ctx)

	c.JSON(consts.StatusOK, resp)
}

type DreamExplainHandler struct {
	req     *ddbaby.DreamExplainReq
	Explain string
}

func NewDreamExplainHandler(req *ddbaby.DreamExplainReq) *DreamExplainHandler {
	return &DreamExplainHandler{
		req: req,
	}
}

func (h *DreamExplainHandler) check() error {
	if h.req.GetDream() == "" {
		return errors.New("dream is empty")
	}
	return nil
}

func (h *DreamExplainHandler) Handle(ctx context.Context) (*ddbaby.DreamExplainResp, error) {
	logrus.WithContext(ctx).Infof("[DreamExplainHandler] req:%v", util.ToJSON(h.req))
	if err := h.check(); err != nil {
		logrus.WithContext(ctx).Errorf("[DreamExplainHandler] check err:%v", err)
		return h.newResp(ctx, -1, "param err"), nil
	}
	content, err := service.GetDreamExplain(ctx, h.req.GetDream())
	if err != nil {
		logrus.WithContext(ctx).Errorf("[DreamExplainHandler] get dream explain err:%v", err)
		return h.newResp(ctx, -2, "get dream explain err"), nil
	}
	h.Explain = content
	return h.newResp(ctx, 0, ""), nil
}

func (h *DreamExplainHandler) newResp(ctx context.Context, code int32, msg string) *ddbaby.DreamExplainResp {
	resp := &ddbaby.DreamExplainResp{
		BaseResp: &ddbaby.BaseResp{
			StatusMessage: msg,
			StatusCode:    code,
		},
	}
	resp.Explain = &h.Explain

	return resp
}

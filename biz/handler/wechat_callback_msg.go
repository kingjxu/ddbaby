// Code generated by hertz generator.

package handler

import (
	"context"
	"github.com/kingjxu/ddbaby/json_callback/wxbizjsonmsgcrypt"
	"github.com/sirupsen/logrus"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	ddbaby "github.com/kingjxu/ddbaby/biz/model/ddbaby"
)

const (
	token          = "yGliIGnJ70LjtiD"
	encodingAeskey = "ymkfk4JAJBRMbCL2MmOkIYwhwm5FqYwy5upwoEjGIUu"
	receiverId     = "ww7e6919f510223ec1" // 企业微信ID
)

// WechatCallbackMsg .
// @router /wechat/callback_msg [GET]
func WechatCallbackMsg(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ddbaby.WechatCallbackMsgReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	wxcpt := wxbizjsonmsgcrypt.NewWXBizMsgCrypt(token, encodingAeskey, receiverId, wxbizjsonmsgcrypt.JsonType)
	data, cryptErr := wxcpt.VerifyURL(req.GetMsgSignature(), req.GetTimestamp(), req.GetNonce(), req.GetEchostr())
	if cryptErr != nil {
		logrus.WithContext(ctx).Errorf("VerifyURL errCode:%v,errMsg:%v", cryptErr.ErrCode, cryptErr.ErrMsg)
		c.String(consts.StatusBadRequest, cryptErr.ErrMsg)
		return
	}
	logrus.WithContext(ctx).Infof("VerifyURL data:%v", string(data))
	//resp := new(ddbaby.WechatCallbackMsgResp)
	c.JSON(consts.StatusOK, data)
}

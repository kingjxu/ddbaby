// Code generated by hertz generator.

package handler

import (
	"context"
	"encoding/xml"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/kingjxu/ddbaby/util"
	"github.com/kingjxu/ddbaby/wework_callback/wxbizmsgcrypt"
	"github.com/sirupsen/logrus"
	"io"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	ddbaby "github.com/kingjxu/ddbaby/biz/model/ddbaby"
)

const (
	token          = "yGliIGnJ70LjtiD"
	encodingAeskey = "ymkfk4JAJBRMbCL2MmOkIYwhwm5FqYwy5upwoEjGIUu"
	receiverId     = "ww7e6919f510223ec1" // 企业微信ID
)

// WechatCallbackMsg .
// @router /wechat/callback_msg [GET]
func WechatCallbackMsg(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ddbaby.WechatCallbackMsgReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	httpReq, err := adaptor.GetCompatRequest(&c.Request)
	if err != nil {
		logrus.WithContext(ctx).Errorf("GetCompatRequest err:%v", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	NewWechatCallbackMsgHandler(httpReq, &req).Handle(ctx)
	c.JSON(consts.StatusOK, "")
}

type WechatCallbackMsgHandler struct {
	httpReq *http.Request
	req     *ddbaby.WechatCallbackMsgReq
	resp    *http.Response
}

type MsgContent struct {
	ToUserName   string `xml:"ToUserName" json:"ToUserName"`
	FromUserName string `xml:"FromUserName" json:"FromUserName"`
	CreateTime   string `xml:"CreateTime" json:"CreateTime"`
	MsgType      string `xml:"MsgType" json:"MsgType"`
	Event        string `xml:"Event" json:"Event"`
	ChangeType   string `xml:"ChangeType" json:"ChangeType"`
	UserID       string `xml:"UserID" json:"UserID"`
	ExternalUser string `xml:"ExternalUserID" json:"ExternalUserID"` // 注意原字段名与 XML 标签一致，JSON 标签保持对应
	State        string `xml:"State" json:"State"`
	WelcomeCode  string `xml:"WelcomeCode" json:"WelcomeCode"`
}

func NewWechatCallbackMsgHandler(httpReq *http.Request, req *ddbaby.WechatCallbackMsgReq) *WechatCallbackMsgHandler {
	return &WechatCallbackMsgHandler{
		req:     req,
		httpReq: httpReq,
	}
}

func (h *WechatCallbackMsgHandler) check() error {
	return nil
}
func (h *WechatCallbackMsgHandler) Handle(ctx context.Context) {
	req := h.req
	logrus.WithContext(ctx).Infof("WechatCallbackMsgHandler req:%v", util.ToJSON(req))
	body, err := io.ReadAll(h.httpReq.Body)
	if err != nil {
		logrus.WithContext(ctx).Errorf("ReadAll err:%v", err)
		return
	}
	logrus.WithContext(ctx).Infof("WechatCallbackMsgHandler body:%v", string(body))
	wxcpt := wxbizmsgcrypt.NewWXBizMsgCrypt(token, encodingAeskey, receiverId, wxbizmsgcrypt.XmlType)
	msg, cryptErr := wxcpt.DecryptMsg(req.GetMsgSignature(), req.GetTimestamp(), req.GetNonce(), body)
	if cryptErr != nil {
		logrus.WithContext(ctx).Errorf("DecryptMsg code:%v,msg:%v", cryptErr.ErrCode, cryptErr.ErrMsg)
		return
	}

	msgContent := MsgContent{}
	err = xml.Unmarshal(msg, &msgContent)
	if err != nil {
		logrus.WithContext(ctx).Errorf("Unmarshal msg err:%v", err)
		return
	}
	logrus.WithContext(ctx).Infof("WechatCallbackMsgHandler msgContent:%v", util.ToJSON(msgContent))
}
